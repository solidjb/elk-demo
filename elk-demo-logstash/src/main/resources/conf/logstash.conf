input {
  file {
    path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-a/logs/json_access.log"
    codec =>   json {
      charset => "UTF-8"
    }
  }
  file {
    path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-a/logs/webapp-out.log"
    codec =>   json {
      charset => "UTF-8"
    }
  }
  file {
      path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-b/logs/json_access.log"
      codec =>   json {
        charset => "UTF-8"
      }
  }
  file {
      path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-b/logs/webapp-out.log"
      codec =>   json {
        charset => "UTF-8"
      }
  }
  file {
        path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-c/logs/json_access.log"
        codec =>   json {
          charset => "UTF-8"
        }
   }
   file {
        path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-c/logs/webapp-out.log"
        codec =>   json {
          charset => "UTF-8"
        }
  }
  file {
      path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-d/logs/json_access.log"
      codec =>   json {
        charset => "UTF-8"
      }
  }
  file {
      path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-d/logs/webapp-out.log"
      codec =>   json {
        charset => "UTF-8"
      }
  }
  file {
      path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-e/logs/json_access.log"
      codec =>   json {
        charset => "UTF-8"
      }
    }
    file {
      path => "/Users/bakerj/workspace/elk-demo/elk-demo-service-e/logs/webapp-out.log"
      codec =>   json {
        charset => "UTF-8"
      }
    }
}
filter {
    if ("DURATION" in [tags]) {
      grok {
        match => ["message", "Duration of %{NUMBER:request_duration:int} ms for the call"]
      }
    }
    if "JSON_MSG" in [tags] {
      json {
        source => "message"
        target => "parsed_message"
        add_tag => "JSON_MSG_PARSED"
      }
    }
    if [logger_name] == "org.oclc.tracing.timed" {
        grok {
           add_tag => ["DURATION", "INSTRUMENTED-EXIT"]
           match => [ "message", "duration was %{NUMBER:request_duration:int} ms for (?<caller_class_name>.*):(?<caller_method_name>.*) with " ]
           tag_on_failure => []
         }
         grok {
           add_tag => ["INSTRUMENTED-ENTRY"]
           match => [ "message", "Entering (?<caller_class_name>.*):(?<caller_method_name>.*) method" ]
           tag_on_failure => []
         }
    }
}
output {
  elasticsearch {
      embedded => true
      protocol => http
  }
}
